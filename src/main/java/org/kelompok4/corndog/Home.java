/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.kelompok4.corndog;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form KASIR
     */
    private Map<String, Integer> pesanan = new java.util.LinkedHashMap<>(); // Simpan Pesanan
    private Map<String, Integer> hargaProduk = new java.util.LinkedHashMap<>();
    public Home() {
        initComponents();
        loadMenuTable();
        loadTable(); // Panggil saat form dibuka
        loadHistoryTable();
        loadDashboardInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // Fungsi buat nampilin tabel menu
    
    private void loadMenuTable() {
    DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
    model.setRowCount(0); // Clear existing rows

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
        String query = "SELECT * FROM products";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            Object[] row = new Object[4]; // Jumlah kolom dalam tabel
            row[0] = rs.getString("product_name");
            row[1] = rs.getInt("harga");
            row[2] = rs.getInt("stok");
            model.addRow(row);
        }

        rs.close();
        stmt.close();
        conn.close();
        
        tblMenu.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() { //Menampilkan "Rp." di kolom tabel tanpa harus mengubah int ke string 
            @Override
            protected void setValue(Object value) {
                if (value instanceof Integer) {
                    setText("Rp. " + value);
                } else {
                    super.setValue(value);
                }
            }
        });

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage());
    }
    
    }
    
    
    
    // Fungsi buat nampilin tabel
    private void loadTable() {
    DefaultTableModel model = (DefaultTableModel) tblProduk.getModel();
    model.setRowCount(0); // Clear existing rows

    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
        String query = "SELECT * FROM products";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            Object[] row = new Object[4]; // Jumlah kolom dalam tabel
            row[0] = rs.getString("product_id");
            row[1] = rs.getString("product_name");
            row[2] = rs.getInt("harga");
            row[3] = rs.getInt("stok");
            model.addRow(row);
        }

        rs.close();
        stmt.close();
        conn.close();
        
            tblProduk.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() { //Menampilkan "Rp." di kolom tabel tanpa harus mengubah int ke string 
            @Override
            protected void setValue(Object value) {
                if (value instanceof Integer) {
                    setText("Rp. " + value);
                } else {
                    super.setValue(value);
                }
            }
        });

        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage());
    }
}
 
    private void loadHistoryTable() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Order ID");
        model.addColumn("Total");
        model.addColumn("Order Date");

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
            String query = "SELECT * FROM history ORDER BY order_date DESC";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                int orderId = rs.getInt("order_id");
                int total = rs.getInt("total");
                String orderDate = rs.getString("order_date");

                model.addRow(new Object[]{orderId, "Rp. " + total, orderDate});
            }

            tblHistory.setModel(model); // tblHistory adalah nama JTable yang menampilkan riwayat
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data riwayat: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }    
    
    private void updateAreaRincian() {
        AreaRincian.setText("");
        int totalSemua = 0;

        for (Map.Entry<String, Integer> entry : pesanan.entrySet()) {
            String nama = entry.getKey();
            int jumlah = entry.getValue();
            int harga = hargaProduk.getOrDefault(nama, 0);
            int total = jumlah * harga;
            totalSemua += total;
            AreaRincian.append(nama + " x" + jumlah + " = Rp" + total + "\n");
        }
            // Tampilkan total di JLabel
        lblHarga.setText("Rp. " + totalSemua);
    }

    private void loadDashboardInfo() {
    try {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");

        // Produk Terjual (jumlah transaksi)
        String sqlTotalTransaksi = "SELECT COUNT(*) AS total_transaksi FROM history";
        PreparedStatement pst1 = conn.prepareStatement(sqlTotalTransaksi);
        ResultSet rs1 = pst1.executeQuery();
        if (rs1.next()) {
            int produkTerjual = rs1.getInt("total_transaksi");
            lblProdukTerjual.setText(String.valueOf(produkTerjual));
        }
        rs1.close();
        pst1.close();

        // Monthly Income (Total pemasukan bulan ini)
        String sqlMonthlyIncome = "SELECT SUM(total) AS monthly_income FROM history WHERE MONTH(order_date) = MONTH(CURRENT_DATE()) AND YEAR(order_date) = YEAR(CURRENT_DATE())";
        PreparedStatement pst2 = conn.prepareStatement(sqlMonthlyIncome);
        ResultSet rs2 = pst2.executeQuery();
        if (rs2.next()) {
            int monthlyIncome = rs2.getInt("monthly_income");
            lblMonthlyIncome.setText("Rp. " + monthlyIncome);
        }
        rs2.close();
        pst2.close();

        // Today Income (berdasarkan tanggal hari ini)
        String sqlTodayIncome = "SELECT SUM(total) AS today_income FROM history WHERE DATE(order_date) = CURDATE()";
        PreparedStatement pst3 = conn.prepareStatement(sqlTodayIncome);
        ResultSet rs3 = pst3.executeQuery();
        if (rs3.next()) {
            int todayIncome = rs3.getInt("today_income");
            lblTodayIncome.setText("Rp. " + todayIncome);
        }
        rs3.close();
        pst3.close();

        conn.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal memuat data dashboard: " + ex.getMessage());
        ex.printStackTrace();
    }
}
    private void refreshMenuTableKeepSelection() {
    // Simpan baris yang sedang dipilih
    int selectedRow = tblMenu.getSelectedRow();

    // Reload data ke tabel
    loadMenuTable();

    // Set ulang selection jika sebelumnya ada yang dipilih dan masih valid
    if (selectedRow >= 0 && selectedRow < tblMenu.getRowCount()) {
        tblMenu.setRowSelectionInterval(selectedRow, selectedRow);
    }
}

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        navbarPanel = new javax.swing.JPanel();
        btnMenu = new javax.swing.JButton();
        btnManage = new javax.swing.JButton();
        btnDashboard = new javax.swing.JButton();
        btnHistory = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();
        panelMenu = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        AreaRincian = new javax.swing.JTextArea();
        btnAdd2 = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblHarga = new javax.swing.JLabel();
        txtBayar = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnBayar = new javax.swing.JButton();
        btnClear2 = new javax.swing.JButton();
        panelManage = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduk = new javax.swing.JTable();
        txtProdukID = new javax.swing.JTextField();
        txtProdukNama = new javax.swing.JTextField();
        txtHarga = new javax.swing.JTextField();
        txtStok = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        panelDashboard = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lblProdukTerjual = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        lblMonthlyIncome = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        lblTodayIncome = new javax.swing.JLabel();
        btnResetAll = new javax.swing.JButton();
        panelHistory = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(85, 63, 63));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Corndog");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(491, 491, 491)
                .addComponent(jLabel1)
                .addContainerGap(494, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1060, 60));

        navbarPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnMenu.setBackground(new java.awt.Color(0, 0, 0));
        btnMenu.setFont(new java.awt.Font("SF Pro Display", 1, 16)); // NOI18N
        btnMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnMenu.setText("Menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnManage.setBackground(new java.awt.Color(0, 0, 0));
        btnManage.setFont(new java.awt.Font("SF Pro Display", 1, 16)); // NOI18N
        btnManage.setForeground(new java.awt.Color(255, 255, 255));
        btnManage.setText("Manage");
        btnManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageActionPerformed(evt);
            }
        });

        btnDashboard.setBackground(new java.awt.Color(0, 0, 0));
        btnDashboard.setFont(new java.awt.Font("SF Pro Display", 1, 16)); // NOI18N
        btnDashboard.setForeground(new java.awt.Color(255, 255, 255));
        btnDashboard.setText("Dashboard");
        btnDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDashboardActionPerformed(evt);
            }
        });

        btnHistory.setBackground(new java.awt.Color(0, 0, 0));
        btnHistory.setFont(new java.awt.Font("SF Pro Display", 1, 16)); // NOI18N
        btnHistory.setForeground(new java.awt.Color(255, 255, 255));
        btnHistory.setText("History");
        btnHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navbarPanelLayout = new javax.swing.GroupLayout(navbarPanel);
        navbarPanel.setLayout(navbarPanelLayout);
        navbarPanelLayout.setHorizontalGroup(
            navbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(navbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnManage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDashboard, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(btnMenu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );
        navbarPanelLayout.setVerticalGroup(
            navbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnManage, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnDashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        getContentPane().add(navbarPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 49, 190, 500));

        panelMenu.setBackground(new java.awt.Color(245, 243, 243));

        jLabel9.setFont(new java.awt.Font("SF Pro Display", 1, 20)); // NOI18N
        jLabel9.setText("Menu");

        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Price (Rp.)", "Remaining Stock"
            }
        ));
        tblMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMenuMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblMenu);

        AreaRincian.setColumns(20);
        AreaRincian.setRows(5);
        jScrollPane4.setViewportView(AreaRincian);

        btnAdd2.setBackground(new java.awt.Color(0, 0, 0));
        btnAdd2.setFont(new java.awt.Font("SF Pro Display", 0, 13)); // NOI18N
        btnAdd2.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd2.setText("Add");
        btnAdd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd2ActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(0, 0, 0));
        btnRemove.setFont(new java.awt.Font("SF Pro Display", 0, 13)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SF Pro Display", 1, 20)); // NOI18N
        jLabel10.setText("Details");

        jLabel11.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel11.setText("Total :");

        lblHarga.setFont(new java.awt.Font("SF Pro Display", 0, 18)); // NOI18N
        lblHarga.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblHarga.setText("Rp. 0");

        jLabel13.setFont(new java.awt.Font("SF Pro Display", 0, 18)); // NOI18N
        jLabel13.setText("Pay :");

        btnBayar.setBackground(new java.awt.Color(85, 63, 63));
        btnBayar.setFont(new java.awt.Font("SF Pro Display", 0, 13)); // NOI18N
        btnBayar.setForeground(new java.awt.Color(255, 255, 255));
        btnBayar.setText("Confirm");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });

        btnClear2.setBackground(new java.awt.Color(0, 0, 0));
        btnClear2.setFont(new java.awt.Font("SF Pro Display", 0, 13)); // NOI18N
        btnClear2.setForeground(new java.awt.Color(255, 255, 255));
        btnClear2.setText("Clear");
        btnClear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMenuLayout = new javax.swing.GroupLayout(panelMenu);
        panelMenu.setLayout(panelMenuLayout);
        panelMenuLayout.setHorizontalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(105, 105, 105))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMenuLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(btnAdd2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(btnClear2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelMenuLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblHarga))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMenuLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMenuLayout.createSequentialGroup()
                        .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)))
                .addGap(18, 18, 18))
        );
        panelMenuLayout.setVerticalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(panelMenuLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(btnAdd2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)))
                .addGap(18, 18, 18)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHarga)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        tabPanel.addTab("tab1", panelMenu);

        panelManage.setBackground(new java.awt.Color(245, 243, 243));

        tblProduk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Price", "Stock"
            }
        ));
        tblProduk.setGridColor(new java.awt.Color(0, 0, 0));
        tblProduk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProdukMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduk);

        btnAdd.setBackground(new java.awt.Color(0, 0, 0));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel2.setText("Product ID");

        jLabel3.setText("Product Name");

        jLabel4.setText("Price");

        jLabel5.setText("Stock");

        jLabel6.setFont(new java.awt.Font("SF Pro Display", 1, 20)); // NOI18N
        jLabel6.setText("Manage");

        javax.swing.GroupLayout panelManageLayout = new javax.swing.GroupLayout(panelManage);
        panelManage.setLayout(panelManageLayout);
        panelManageLayout.setHorizontalGroup(
            panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageLayout.createSequentialGroup()
                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelManageLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelManageLayout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelManageLayout.createSequentialGroup()
                                        .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addGap(16, 16, 16)
                                        .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtProdukID)
                                            .addComponent(txtProdukNama, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(86, 86, 86)
                                        .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(21, 21, 21))
                                    .addGroup(panelManageLayout.createSequentialGroup()
                                        .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelManageLayout.createSequentialGroup()
                                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(214, 214, 214))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelManageLayout.createSequentialGroup()
                                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(67, 67, 67)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)))
                                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtHarga)
                                        .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(panelManageLayout.createSequentialGroup()
                        .addGap(393, 393, 393)
                        .addComponent(jLabel6)))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        panelManageLayout.setVerticalGroup(
            panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProdukID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtProdukNama, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(panelManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tabPanel.addTab("tab2", panelManage);

        panelDashboard.setBackground(new java.awt.Color(245, 243, 243));

        jLabel8.setFont(new java.awt.Font("SF Pro Display", 1, 20)); // NOI18N
        jLabel8.setText("Dashboard");

        jPanel2.setBackground(new java.awt.Color(85, 63, 63));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Product Sold");

        lblProdukTerjual.setFont(new java.awt.Font("SF Pro Display", 0, 36)); // NOI18N
        lblProdukTerjual.setForeground(new java.awt.Color(255, 255, 255));
        lblProdukTerjual.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProdukTerjual.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblProdukTerjual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(lblProdukTerjual)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(85, 63, 63));
        jPanel3.setPreferredSize(new java.awt.Dimension(190, 130));

        jLabel16.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Monthly Income");

        lblMonthlyIncome.setFont(new java.awt.Font("SF Pro Display", 0, 18)); // NOI18N
        lblMonthlyIncome.setForeground(new java.awt.Color(255, 255, 255));
        lblMonthlyIncome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMonthlyIncome.setText("Rp. 0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMonthlyIncome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel16)
                .addGap(28, 28, 28)
                .addComponent(lblMonthlyIncome)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(85, 63, 63));
        jPanel4.setPreferredSize(new java.awt.Dimension(190, 130));

        jLabel17.setFont(new java.awt.Font("SF Pro Display", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Today Income");

        lblTodayIncome.setFont(new java.awt.Font("SF Pro Display", 0, 18)); // NOI18N
        lblTodayIncome.setForeground(new java.awt.Color(255, 255, 255));
        lblTodayIncome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTodayIncome.setText("Rp. 0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
            .addComponent(lblTodayIncome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel17)
                .addGap(27, 27, 27)
                .addComponent(lblTodayIncome)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        btnResetAll.setBackground(new java.awt.Color(153, 153, 153));
        btnResetAll.setText("Reset All");
        btnResetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDashboardLayout = new javax.swing.GroupLayout(panelDashboard);
        panelDashboard.setLayout(panelDashboardLayout);
        panelDashboardLayout.setHorizontalGroup(
            panelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDashboardLayout.createSequentialGroup()
                .addGap(393, 393, 393)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDashboardLayout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addGroup(panelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnResetAll)
                    .addGroup(panelDashboardLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(79, 79, 79))
        );
        panelDashboardLayout.setVerticalGroup(
            panelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDashboardLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(panelDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                .addComponent(btnResetAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );

        tabPanel.addTab("tab3", panelDashboard);

        panelHistory.setBackground(new java.awt.Color(245, 243, 243));

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order ID", "Total", "Order Date"
            }
        ));
        jScrollPane2.setViewportView(tblHistory);

        jLabel7.setFont(new java.awt.Font("SF Pro Display", 1, 20)); // NOI18N
        jLabel7.setText("History");

        javax.swing.GroupLayout panelHistoryLayout = new javax.swing.GroupLayout(panelHistory);
        panelHistory.setLayout(panelHistoryLayout);
        panelHistoryLayout.setHorizontalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHistoryLayout.createSequentialGroup()
                .addContainerGap(144, Short.MAX_VALUE)
                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHistoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addGap(304, 304, 304))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(102, 102, 102))
        );
        panelHistoryLayout.setVerticalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHistoryLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        tabPanel.addTab("tab4", panelHistory);

        getContentPane().add(tabPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 870, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDashboardActionPerformed
        // TODO add your handling code here:
        tabPanel.setSelectedComponent(panelDashboard);
    }//GEN-LAST:event_btnDashboardActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        tabPanel.setSelectedComponent(panelMenu);
        btnClear2ActionPerformed(evt);
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String productID = txtProdukID.getText().trim();

         if (productID.isEmpty()) {
             JOptionPane.showMessageDialog(this, "Product ID harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
             return;
         }

         int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus produk dengan ID " + productID + "?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
         if (confirm != JOptionPane.YES_OPTION) {
             return;
         }

         try {
             Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
             String query = "DELETE FROM products WHERE product_id = ?";
             PreparedStatement pst = conn.prepareStatement(query);
             pst.setString(1, productID);

             int rowsDeleted = pst.executeUpdate();

             if (rowsDeleted > 0) {
                 JOptionPane.showMessageDialog(this, "Produk berhasil dihapus.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                 loadTable(); // Refresh data di tblProduk
                 loadMenuTable(); // Memperbarui Menu

                 // Kosongkan semua input
                 txtProdukID.setText("");
                 txtProdukNama.setText("");
                 txtHarga.setText("");
                 txtStok.setText("");
             } else {
                 JOptionPane.showMessageDialog(this, "Produk dengan ID tersebut tidak ditemukan.", "Error", JOptionPane.ERROR_MESSAGE);
             }

         } catch (SQLException e) {
             JOptionPane.showMessageDialog(this, "Gagal menghapus produk: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        // Clear all text fields
        txtProdukID.setText("");
        txtProdukNama.setText("");
        txtHarga.setText("");
        txtStok.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String productId = txtProdukID.getText().trim();
        String productName = txtProdukNama.getText().trim();
        String hargaText = txtHarga.getText().trim();
        String stokText = txtStok.getText().trim();

        // Validasi input kosong
        if (productId.isEmpty() || productName.isEmpty() || hargaText.isEmpty() || stokText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int harga = Integer.parseInt(hargaText);
            int stok = Integer.parseInt(stokText);

            // Koneksi ke database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");

            // Cek apakah ID produk sudah ada
            String checkQuery = "SELECT product_id FROM products WHERE product_id = ?";
            PreparedStatement checkPst = conn.prepareStatement(checkQuery);
            checkPst.setString(1, productId);
            ResultSet rs = checkPst.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(this, "ID Produk sudah ada. Gunakan ID lain.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                rs.close();
                checkPst.close();
                conn.close();
                return;
            }

            rs.close();
            checkPst.close();

            // Lanjutkan insert jika ID belum ada
            String query = "INSERT INTO products (product_id, product_name, harga, stok) VALUES (?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, productId);
            pst.setString(2, productName);
            pst.setInt(3, harga);
            pst.setInt(4, stok);

            pst.executeUpdate();

            // Tambahkan ke tabel GUI
            DefaultTableModel model = (DefaultTableModel) tblProduk.getModel();
            model.addRow(new Object[]{productId, productName, harga, stok});

            JOptionPane.showMessageDialog(this, "Produk berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE);

            // Kosongkan field input
            txtProdukID.setText("");
            txtProdukNama.setText("");
            txtHarga.setText("");
            txtStok.setText("");

            // Memperbarui Menu
            loadMenuTable();

            pst.close();
            conn.close();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Harga dan stok harus berupa angka bulat.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan produk: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageActionPerformed
        // TODO add your handling code here:
        tabPanel.setSelectedComponent(panelManage);
        txtProdukID.setText("");
        txtProdukNama.setText("");
        txtHarga.setText("");
        txtStok.setText("");
    }//GEN-LAST:event_btnManageActionPerformed

    private void btnHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryActionPerformed
        // TODO add your handling code here:
        tabPanel.setSelectedComponent(panelHistory);
    }//GEN-LAST:event_btnHistoryActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String productID = txtProdukID.getText().trim();
        String productName = txtProdukNama.getText().trim();
        String priceText = txtHarga.getText().trim();
        String stockText = txtStok.getText().trim();

        // Validasi input
        if (productID.isEmpty() || productName.isEmpty() || priceText.isEmpty() || stockText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int price = Integer.parseInt(priceText); // Ubah jadi int
            int stock = Integer.parseInt(stockText);

            // Koneksi ke database
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
            String query = "UPDATE products SET product_name = ?, harga = ?, stok = ? WHERE product_id = ?";
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, productName);
            pst.setInt(2, price); // Gunakan setInt
            pst.setInt(3, stock);
            pst.setString(4, productID);

            int rowsUpdated = pst.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Produk berhasil diperbarui.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                loadTable(); // Pastikan loadTable() berfungsi untuk refresh tblProduk
                loadMenuTable(); // Memperbarui Menu
            } else {
                JOptionPane.showMessageDialog(this, "Produk dengan ID tersebut tidak ditemukan.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Harga dan stok harus berupa angka bulat.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal memperbarui produk: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblProdukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProdukMouseClicked
        // TODO add your handling code here:
        int row = tblProduk.getSelectedRow();
        if (row >= 0) {
            txtProdukID.setText(tblProduk.getValueAt(row, 0).toString());
            txtProdukNama.setText(tblProduk.getValueAt(row, 1).toString());
            txtHarga.setText(tblProduk.getValueAt(row, 2).toString());
            txtStok.setText(tblProduk.getValueAt(row, 3).toString());
        }
    }//GEN-LAST:event_tblProdukMouseClicked

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
    String nama = txtProdukNama.getText();

        if (pesanan.containsKey(nama)) {
            int jumlah = pesanan.get(nama) - 1;

            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");

                // Ambil stok sekarang dari database
                String queryStok = "SELECT stok FROM products WHERE product_name = ?";
                PreparedStatement pstStok = conn.prepareStatement(queryStok);
                pstStok.setString(1, nama);
                ResultSet rs = pstStok.executeQuery();

                if (rs.next()) {
                    int stokSekarang = rs.getInt("stok");
                    int stokBaru = stokSekarang + 1;

                    // Update stok di database
                    String queryUpdate = "UPDATE products SET stok = ? WHERE product_name = ?";
                    PreparedStatement pstUpdate = conn.prepareStatement(queryUpdate);
                    pstUpdate.setInt(1, stokBaru);
                    pstUpdate.setString(2, nama);
                    pstUpdate.executeUpdate();

                    pstUpdate.close();
                }

                rs.close();
                pstStok.close();
                conn.close();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal update stok: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }

            // Update pesanan map
            if (jumlah > 0) {
                pesanan.put(nama, jumlah);
            } else {
                pesanan.remove(nama);
                hargaProduk.remove(nama);
            }

            updateAreaRincian();
            refreshMenuTableKeepSelection(); // refresh stok di tabel menu
            loadTable(); // refresh stok di UI
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAdd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd2ActionPerformed
        // TODO add your handling code here:
    String nama = txtProdukNama.getText();
    String hargaStr = txtHarga.getText();

    try {
        int harga = Integer.parseInt(hargaStr);

        // Cek stok dari database
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
        String queryStok = "SELECT stok FROM products WHERE product_name = ?";
        PreparedStatement pst = conn.prepareStatement(queryStok);
        pst.setString(1, nama);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int stokSekarang = rs.getInt("stok");

            if (stokSekarang > 0) {
                // Kurangi stok
                int stokBaru = stokSekarang - 1;
                String queryUpdate = "UPDATE products SET stok = ? WHERE product_name = ?";
                PreparedStatement pstUpdate = conn.prepareStatement(queryUpdate);
                pstUpdate.setInt(1, stokBaru);
                pstUpdate.setString(2, nama);
                pstUpdate.executeUpdate();

                // Tambahkan ke map pesanan
                int jumlah = pesanan.getOrDefault(nama, 0) + 1;
                pesanan.put(nama, jumlah);
                hargaProduk.put(nama, harga); // Simpan harga untuk produk
                
                updateAreaRincian();
                refreshMenuTableKeepSelection();
                loadTable(); // Refresh tampilan tabel
            } else {
                JOptionPane.showMessageDialog(this, "Stok habis untuk produk ini.");
            }

            rs.close();
            pst.close();
        } else {
            JOptionPane.showMessageDialog(this, "Produk tidak ditemukan di database.");
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Harga tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal mengakses database: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }

    }//GEN-LAST:event_btnAdd2ActionPerformed

    private void tblMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMenuMouseClicked
        // TODO add your handling code here:
    int selectedRow = tblMenu.getSelectedRow();
    if (selectedRow >= 0) {
        String nama = tblMenu.getValueAt(selectedRow, 0).toString(); // Kolom 0: product_name
        String harga = tblMenu.getValueAt(selectedRow, 1).toString(); // Kolom 1: harga

        txtProdukNama.setText(nama);
        txtHarga.setText(harga);
    }
    }//GEN-LAST:event_tblMenuMouseClicked

    private void btnClear2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear2ActionPerformed
        // TODO add your handling code here:
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");

            // Kembalikan stok setiap produk
            for (Map.Entry<String, Integer> entry : pesanan.entrySet()) {
                String namaProduk = entry.getKey();
                int jumlahPesan = entry.getValue();

                // Ambil stok saat ini
                String querySelect = "SELECT stok FROM products WHERE product_name = ?";
                PreparedStatement pstSelect = conn.prepareStatement(querySelect);
                pstSelect.setString(1, namaProduk);
                ResultSet rs = pstSelect.executeQuery();

                if (rs.next()) {
                    int stokSekarang = rs.getInt("stok");
                    int stokBaru = stokSekarang + jumlahPesan;

                    // Update stok di database
                    String queryUpdate = "UPDATE products SET stok = ? WHERE product_name = ?";
                    PreparedStatement pstUpdate = conn.prepareStatement(queryUpdate);
                    pstUpdate.setInt(1, stokBaru);
                    pstUpdate.setString(2, namaProduk);
                    pstUpdate.executeUpdate();

                    pstUpdate.close();
                }

                rs.close();
                pstSelect.close();
            }

            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal reset stok: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

        // Kosongkan pesanan dan tampilan
        pesanan.clear();
        hargaProduk.clear();
        AreaRincian.setText("");
        lblHarga.setText("Rp. 0");
        loadMenuTable();
        loadTable(); // Refresh tabel stok
    }//GEN-LAST:event_btnClear2ActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBayarActionPerformed
        // TODO add your handling code here:
    int totalSemua = 0;

    // Hitung total
    for (Map.Entry<String, Integer> entry : pesanan.entrySet()) {
        String nama = entry.getKey();
        int jumlah = entry.getValue();
        int harga = hargaProduk.getOrDefault(nama, 0);
        totalSemua += jumlah * harga;
    }

    if (totalSemua == 0) {
        JOptionPane.showMessageDialog(this, "Tidak ada pesanan untuk dibayar.");
        return;
    }

    // Ambil input dari txtBayar
    String bayarStr = txtBayar.getText().trim();
    if (bayarStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Silakan masukkan jumlah uang yang dibayar.");
        return;
    }

    try {
        int uangDibayar = Integer.parseInt(bayarStr);

        if (uangDibayar < totalSemua) {
            JOptionPane.showMessageDialog(this, "Uang tidak cukup! Total yang harus dibayar: Rp. " + totalSemua);
            return;
        }

        int kembalian = uangDibayar - totalSemua;

        // Simpan transaksi ke database
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");
        String query = "INSERT INTO history (total) VALUES (?)";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, totalSemua);
        pst.executeUpdate();

        JOptionPane.showMessageDialog(this, "Transaksi berhasil!\nKembalian: Rp. " + kembalian);

        // Reset data & UI
        pesanan.clear();
        hargaProduk.clear();
        AreaRincian.setText("");
        lblHarga.setText("Rp. 0");
        txtBayar.setText("");
        loadMenuTable();
        loadHistoryTable();
        loadDashboardInfo();
        
        pst.close();
        conn.close();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Input uang tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Gagal menyimpan transaksi: " + ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_btnBayarActionPerformed

    private void btnResetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetAllActionPerformed
            // TODO add your handling code here:
               // Tampilkan dialog konfirmasi
        int konfirmasi = JOptionPane.showConfirmDialog(
                this,
                "Apakah Anda yakin ingin menghapus semua data di database?",
                "Konfirmasi Reset Data",
                JOptionPane.YES_NO_OPTION
        );

        // Jika user klik YES
        if (konfirmasi == JOptionPane.YES_OPTION) {
            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/corndog", "root", "");

                // Hapus data dari semua tabel yang relevan
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("DELETE FROM history");
                stmt.executeUpdate("DELETE FROM products");
                // Jika ada tabel lain, tambahkan juga perintah delete-nya

                stmt.close();
                conn.close();

                JOptionPane.showMessageDialog(this, "Semua data berhasil dihapus.");

                // Refresh UI jika diperlukan
                loadMenuTable();
                loadTable();
                loadHistoryTable();
                loadDashboardInfo();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + e.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnResetAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaRincian;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAdd2;
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClear2;
    private javax.swing.JButton btnDashboard;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnManage;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnResetAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblHarga;
    private javax.swing.JLabel lblMonthlyIncome;
    private javax.swing.JLabel lblProdukTerjual;
    private javax.swing.JLabel lblTodayIncome;
    private javax.swing.JPanel navbarPanel;
    private javax.swing.JPanel panelDashboard;
    private javax.swing.JPanel panelHistory;
    private javax.swing.JPanel panelManage;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTable tblHistory;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTable tblProduk;
    private javax.swing.JTextField txtBayar;
    private javax.swing.JTextField txtHarga;
    private javax.swing.JTextField txtProdukID;
    private javax.swing.JTextField txtProdukNama;
    private javax.swing.JTextField txtStok;
    // End of variables declaration//GEN-END:variables
}
